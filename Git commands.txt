
1 git status - стан репозиторію

2 git init . - створення репозиторію

3 ls -al - показывает все файлы в текущей папке

4 explorer . - показывает файлы в скрытой папке и открывает хранилище

5 cd .. - выйти на уровень выше

6 git add <назва файлу> додати файл до репозиторію

7 git commit -m "Added (README - НАЗВАНИЕ ФАЙЛА)"

8 git config user.email - почта

9 git config user.name - никнейм 

10 git commit -m "Added (README - НАЗВАНИЕ ФАЙЛА)"

11 git status - состояния репозитория

12 git log - історія комітів ( отредактировать файл readme.txt)

13 git status - ввести после редакторования файла

14 git add readme.txt - этой командой можно как добавлять новые файлы так и после редактирования

15 git commit -m "Modified README" - добавляет в сохранение файл после редактирования 

16 git log -  сделать после предвидущего что бы увидеть статистику комитов

17 git branch - список гілок + активна гілка

18 git checkout -b <гілка» - створення нової гілки і перемикання

19 git chekout (master - название ветки и переход на нее)

20 git status - сделать после предыдущего и создать для него папку с файлом в формате джава

21 public class HelloWorld {
    public static void main (String [] args) {
        System.out.println ("Hello World In Git");
    }
} -  ввести это в новом файле для  ветки first_future 

22 git status - ввести после предыдущего

23 git add src/ - добавление папки в новую ветку

24 git status - ввести после предыдущего

25 git commit -m "Added Hello World" добавление файла с папки src/

26 git log - ввести после предыдущего 

27 git checkout master - ввести после предыдущего 

28 git log - ввести после предыдущего

29 git status  - ввести после предыдущего

30 git checkout first_feature - ввести после предыдущего

31 git log - ввести после предыдущего

32 cd src/ - ввести после предыдущего (так можно зайти сразу в папку с файлом)

33 java - ввести после предыдущего

34 C:\Program Files\Java\jdk1.8.0_221\bin - путь к джава для компиляции

35 "C:\Program Files\Java\jdk1.8.0_221\bin" - эта команда добавляет джава в директорию

36 "C:\Program Files\Java\jdk1.8.0_221\bin\javac" - ввести после предыдущего

37 "C:\Program Files\Java\jdk1.8.0_221\bin\javac" HelloWorld.java - эта команда вызывает файл для компиляции

38 java HelloWorld- эта команда запускает класс файла джава и делает компиляцию  и показывает что код работатет

39 cd .. - ввести после предыдущего

40 git branch - ввести после предыдущего

41 git checkout master - нужно перейти в ветку мастера для того что бы соеденить две ветки

42 git merge - ввести после предыдущего

43 git merge first_feature -  обьеденяет ветку нужно вводить с основной ветки (master)

44 git log - посмотреть статистику после соединения веток

45 git checkout 03c876 - (первые 6 цифр хэша, это нужно для просмотра истории и изменения файла)

46 git log -  показывает статистику комита в котором ты находшся

47 git checkout master - выход из статистики комита и определенного файла

48 git diff 03c876 <комит 1> c3e048 <комит 2> [pann] команда которая позволяет смотреть изменения между комитами

49 зайти в файл Helloworld и изменить строчку (Hello World in Git) поменять Git на Error

50 git status - ввести после предыдущего

51 git add scr/HelloWorld.java - эта команда дабавит изменения в файле HelloWorld

52 git commit -m "Fixed HelloWorld" - сохранение измененного файла

53 git log - после предыдущего

54 можно проверить изменения в файле HelloWorld через команду - git diff  и указать первые 6 символов хэша коммита

55 нужно создать репозыторий на гит хабе и синхронизировать репозитории на компьютере и гит хабе

56 git remote add origin https://github.com/Nykyta-tech/second_git - этой командой мы добавляет ГитХаб и можем его синхронизировать

57 git remote -v - список удаленных репозиториев для отправки или загрузки репозиториев

58 git push origin master - команда указывающая куда мы отправляем наш репозиторий и с какой ветки мы отправляем

59 после прошлой команды мы должны ввести логин и пароль и отправить на репозиторий на ГитХаб

60 git push origin first_feature - команда указывающая куда мы отправляем наш репозиторий и с какой ветки мы отправляем

61 git pul origin master -  загружает изменения с ГитХаба

62 git commin -m "Added Push and Pull command descriptions" - 

63 git stash -  скрывает изменения  в файле сохраняет их в git хранилище

64 git stash apply возвращает изменения в файле из git хранилища 

65 git add -u - добавляет все файлы которые бли в индексе и были изменены альтернатива команде git add (Git\ conmmands.txt -  название файла)

66 git commit -m "Added Stash command descriptions" - 

67 добавляем текстовый докумет test.txt в репозиторий

68 затем пишем команду  touch .gitignore - это позволит нам создать файл в который мы сможем указывать названия других файлов и репозиторий будет их игнорировать

69 git add .gitignore -  эта комана добавит файл .gitignore  в репозиторий

70 git commit -m "Added .gitignore" -  эта команда сделает коммит в репозиторий а именно папку  .gitignore

71 git push origin master -  нужно добавить файл .gitignore на GitHab

72  в репозитории содаем папку - IDE, в этой папке создаем 2 () файла и под папку() с файлом ()

73 затем добавляем это все в .gitignore, пишем команду  git add -u, и теперь у нас все новые папки и файлы в файле .gitignore и на репозиторий не засоряется

74 git commit -m "Excluded IDE files in .gitignore" - 

75  сохраняем все на  GitHab  чез команду  git push origin master

76 


